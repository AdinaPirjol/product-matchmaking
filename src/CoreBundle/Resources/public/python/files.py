import mysql.connector
from mysql.connector import errorcode
from match import get_kp_desc, pickle_kp, unpickle_kp, list_to_kp, kp_to_list
import cPickle as pickle
import md5
from PIL import Image
import imghdr
import os
from aux import name_gen
from img_proc import image_resize
import shutil
from joblib import Parallel, delayed

###
# insert_photo creates the keypoints and descriptors from an image,
# compresses them and saves them in a file whose path and name
# are generated by the id_prod and id_categ
# Input:
# nume_poza(string) = path to image
# id_prod(int) = product id for the image
# id_categ(int) = category id for the image
# Output:
# 1 if everything is ok
# -1 if the keypoints of this photo already exist in the database
###
def insert_photo(nume_poza, id_prod, id_categ):
	init_name = nume_poza
	# checking if image is in 'png' format and converts it to jpeg if so
	if imghdr.what(nume_poza) == 'png':
		try:
			poza = Image.open(nume_poza)
			poza.save('../files/outfile.jpg', "JPEG")
		except:
			print "The selected picture could not be saved.<br />"
		else:
			nume_poza = "../files/outfile.jpg"
	poza = Image.open(nume_poza)
	
	# resizing image to a maximum of 800x800 size
	nume_poza = image_resize(nume_poza, 800)
		
	# extracting keypoints and descriptors
	kp, des = get_kp_desc(nume_poza);
	if kp == -1:
		os.remove(nume_poza)
		return

	# resizing image to a maximum of 200x200 to create a thumbnail
	nume_poza = image_resize(nume_poza, 200)

	# hashish is null when the kp already exist 
	# (the selected pic is already saved)
	hashish = pickle_kp(kp, des, id_prod, id_categ)
	if hashish != -1:
		fn = id_prod + '.jpg'
		os.rename(nume_poza, '../files/' + fn)
		direc = '../files/' + id_categ


		if not os.path.isdir(direc):
			os.mkdir(direc)
			shutil.move('../files/' + fn, direc)
		else:
			file_path = direc + '/' + fn
			if not os.path.exists(file_path):
				shutil.move('../files/' + fn, direc)
			else:
				os.remove('../files/' + fn)
		return 1
	else:
		if os.path.isfile(init_name):
			os.remove(init_name)
		else:
			os.remove(nume_poza)
		return -1


###
# Extracts all keypoints and descriptors from the folder
# that corresponds with the value passed by id_categ
# Input:
# id_categ = the category that the user selected for matching
# Output:
# ids = the product ids
# kps(Keypoints object) = the keypoints for the corresponding product id
# des(numpy array) = the descriptors for the corresponding product id
###
def get_categ_kp_db(id_categ):
	kps = []
	descr = []
	ids = []

	path = '../keypoints/' + id_categ


	for file in os.listdir(path):
		fn = os.path.basename(file)
		file_path = path + '/' + fn
		fn = os.path.splitext(fn)[0]
		fn = fn.split('_')
		ids.append(fn[0])

		kp, des = unpickle_kp(file_path)
		kps.append(kp)
		descr.append(des)


	return ids, kps, descr

###
# checks and creates the files/ and keypoints/ directories if they don't exist
# everytime the keypoints db is updated
###
def create_dir():
	if not os.path.isdir('../files'):
		os.mkdir('../files')
	if not os.path.isdir('../keypoints'):
		os.mkdir('../keypoints')


